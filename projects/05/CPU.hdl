// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);

    Not(in=instruction[12], out=NotaBit);
    Or(a=NotaBit, b=Ainstruction, out=aBitOrAinstruction);

    And(a=Cinstruction, b=instruction[11], out=c1);
    And(a=Cinstruction, b=instruction[10], out=c2);
    And(a=Cinstruction, b=instruction[9], out=c3);
    And(a=Cinstruction, b=instruction[8], out=c4);
    And(a=Cinstruction, b=instruction[7], out=c5);
    And(a=Cinstruction, b=instruction[6], out=c6);

    And(a=Cinstruction, b=instruction[5], out=d1);
    And(a=Cinstruction, b=instruction[4], out=d2);
    And(a=Cinstruction, b=instruction[3], out=d3);

    And(a=Cinstruction, b=instruction[2], out=j1);
    And(a=Cinstruction, b=instruction[1], out=j2);
    And(a=Cinstruction, b=instruction[0], out=j3);

    Mux16(a=instruction, b=ALUout, sel=Cinstruction, out=AregisterIn);
    Or(a=Ainstruction, b=d1, out=loadARegister);
    ARegister(in=AregisterIn, load=loadARegister, out=Aout, out[0..14]=addressM);
    DRegister(in=ALUout, load=d2, out=ALUinD);

    Mux16(a=inM, b=Aout, sel=aBitOrAinstruction, out=AorM);

    Or(a=Ainstruction, b=false, out=onlyA);
    Or(a=onlyA, b=false, out=fADD);
    Or(a=c1, b=Ainstruction, out=c1OrAinstruction);
    Or(a=c2, b=Ainstruction, out=c2OrAinstruction);
    ALU(x=ALUinD, y=AorM, zx=c1OrAinstruction, nx=c2OrAinstruction, zy=c3, ny=c4, f=c5, no=c6, out=ALUout, zr=resZero, ng=resNeg);

    And16(a=ALUout, b=true, out=outM);
    And(a=true, b=d3, out=writeM);

    // handle jumps
    Not(in=resZero, out=NotResZero);
    Not(in=resNeg, out=NotresNeg);
    And(a=NotResZero, b=NotresNeg, out=NotZeroAndNotNeg);
    And(a=j1, b=j3, out=jmpDiff);

    And(a=resZero, b=j2, out=EqJump);
    And(a=NotZeroAndNotNeg, b=j3, out=GTJump);
    And(a=resNeg, b=j1, out=LTJump);
    And(a=NotResZero, b=jmpDiff, out=NotEQJump);

    Or(a=EqJump, b=GTJump, out=GTorEQjmp);
    Or(a=LTJump, b=NotEQJump, out=LTorNEQjmp);
    Or(a=GTorEQjmp, b=LTorNEQjmp, out=PCload);
    Not(in=PCload, out=PCinc);

    PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}